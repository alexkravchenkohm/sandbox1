# Build and publish artifacts into the release assets 

name: Create Release and Publish Artifacts

on:
  push:
    # Sequence of patterns matched against refs/tags 
    tags:
    - 'v*'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build -c Release --no-restore

    - name: dotnet publish
      run: dotnet publish -c Release -r win-x64 --self-contained false -p:PublishSingleFile=true -o ${{github.workspace}}\.publish

    - name: Get the version
      id: get_zip_file_name
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}.zip
      shell: bash

    - name: Archive Release
      uses: thedoctor0/zip-release@main
      with:
        directory: ${{github.workspace}}\.publish
        type: 'zip'
        filename: '${{steps.get_zip_file_name.outputs.VERSION}}'
        exclusions: '*.pdb'

    - name: List files in publish folder
      run: |
        dir ${{github.workspace}}\.publish

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

      # This requires a Tag to be created with no existing Release.
      # I was not able to find how to create a Tag without an immediate Release on the github portal.
      # I use Visual Studio UI to create tags and use command 'git push --tags' in terminal.
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{github.workspace}}\.publish\${{steps.get_zip_file_name.outputs.VERSION}}
        asset_name: ${{steps.get_zip_file_name.outputs.VERSION}}
        asset_content_type: application/zip
